// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int    @id @default(autoincrement()) 
  name     String
  email    String @unique
  username String @unique
  password String
  image    String?  @db.LongText 
  balance  Int     @default(0)
  role     Role   @default(USER)

  orders        Order[]
  wishlists     Wishlist[]
  reviews       Review[]
  responses     AdminResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("users") 
}

enum Role {
  ADMIN
  USER
}


model Ticket {
  ticketId          Int     @id @default(autoincrement())
  name        String
  price       Int
  capacity    Int
  description String
  image       String @db.LongText 
  location    String
  latitude    Float
  longitude   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  wishlists        Wishlist[]

  @@map("tickets")
}

model Order {
  orderId       String         @id
  userId        Int
  ticketId      Int
  quantity      Int
  totalPrice    Decimal
  status        OrderStatus    @default(PENDING)
  date          DateTime

  user          User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  ticket        Ticket         @relation(fields: [ticketId], references: [ticketId], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model Wishlist {
  wishlistId    Int     @id @default(autoincrement())
  userId        Int
  ticketId      Int
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  ticket        Ticket         @relation(fields: [ticketId], references: [ticketId], onDelete: Cascade)

  @@map("wishlists")
}

model Review {
  reviewId      Int    @id @default(autoincrement())
  userId        Int
  rating        Int
  comment       String
  user          User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  responses     AdminResponse[]

  @@map("reviews")
}

model AdminResponse {
  responseId  Int     @id @default(autoincrement())
  reviewId    Int     @unique
  userId      Int
  response    String  @db.Text
  createdAt   DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  admin  User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("responses")
}
